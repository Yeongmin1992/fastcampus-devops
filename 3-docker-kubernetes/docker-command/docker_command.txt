[docker 명령어]

docker ps : 실행중인 도커 프로세스
docker ps -a : 전체 도커 프로세스
docker run nginx : 도커 컨테이너 생성 및 시작 실행
docker create nginx : 도커 컨테이너 생성
docker start <컨테이너 명> : 도커 컨테이너 시작
docker run ubuntu:focal : ubuntu focal 버전 컨테이너 실행
-> bash 명령어는 foreground로 실행되지 않음(interactive한 표준 입력을 필요로 함) -> 이럴 때 -i -t 옵션 사용
docker run -i -t ubuntu:focal -> 컨테이너 내부에서 명령어 수행 가능 -> exit로 나올 수 있음 -> ctrl + p, q를 사용하여 컨테이너가 실행중인 상태로 컨테이너 커맨드 창을 나올 수 있음
docker run -d nginx : 백그라운드 실행
docker run -d --name my-nginx nginx : 이름 지정하여 컨테이너 실행
docker run -p 80:80 -d nginx : 호스트의 80번 포트와 컨테이너의 80번 포트를 연결
curl localhost:80 -> nginx가 정상적으로 실행중임을 알 수 있음
docker run ubuntu:focal id -> 원하는 명령어 실행 가능. 이 경우는 id 명령어
docker ps -a를 하면 위 명령어 실행으로 기본 커맨드가 id 명령어로 변경되었고, 종료되었음을 확인할 수 있음
docker run --rm ubuntu:focal id -> --rm은 자동종료. docker ps -a에 기록이 남지 않음
docker inspect <container name or container id> : 컨테이너 상세 정보
docker pause <container> : 컨테이너 일시중지
docker unpause <container> : 컨테이너 재개
docker stop <container> : 컨테이너 종료
docker kill <container> : 컨테이너 강제 종료
docker stop $(docker ps -a -q) : 모든 컨테이너 종료 -> $(~) ~의 결과 값을 전달
docker rm <container> : 컨테이너 삭제 
docker rm -f <container> : 컨테이너 강제 종료 후 삭제
docker run --rm <container> : 컨테이너 실행 종료 후 자동 삭제
docker container prune : 중지된 모든 컨테이너 삭제